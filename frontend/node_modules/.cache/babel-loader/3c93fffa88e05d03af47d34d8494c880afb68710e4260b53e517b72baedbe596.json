{"ast":null,"code":"var _jsxFileName = \"/Users/kai/side-project/ticket-booking-system/frontend/src/components/widget.tsx\",\n  _s = $RefreshSig$();\n// src/components/widget.tsx\nimport { useAuth } from '../context/AuthContext';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Widget({\n  imageUrl,\n  name,\n  start_date,\n  end_date,\n  id\n}) {\n  _s();\n  const {\n    isLoggedIn\n  } = useAuth();\n  function formatDate(dateString) {\n    // 将字符串解析为 Date 对象\n    const date = new Date(dateString);\n\n    // 确保有效的日期\n    if (isNaN(date.getTime())) {\n      throw new Error('Invalid date string');\n    }\n\n    // 获取日期的组成部分\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // 月份从0开始，需要加1\n    const day = String(date.getDate()).padStart(2, '0');\n\n    // 获取星期几\n    const weekDayNames = ['日', '一', '二', '三', '四', '五', '六'];\n    const weekDay = `${weekDayNames[date.getDay()]}`;\n\n    // 返回格式化的日期字符串\n    return `${year}/${month}/${day} (${weekDay})`;\n  }\n\n  // 测试\n  const formattedDate = formatDate('2024-12-25');\n  console.log(formattedDate); // 输出: 2024/12/25 (星期三)\n\n  return /*#__PURE__*/_jsxDEV(Link, {\n    to: `/activity/${id}` // 使用模板字符串来传递动态的 ID\n    ,\n    style: {\n      display: 'block',\n      width: '300px',\n      borderRadius: '10px',\n      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n      overflow: 'hidden',\n      backgroundColor: '#fff',\n      textAlign: 'center',\n      justifyItems: 'left'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        height: '200px',\n        backgroundImage: `url(${imageUrl})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        padding: '10px 15px',\n        margin: 0,\n        fontSize: '16px',\n        color: '#333'\n      },\n      children: formatDate(start_date)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        padding: '5px 15px',\n        margin: 0,\n        fontSize: '16px',\n        color: '#333'\n      },\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(Widget, \"Jbx0LrCfdz/EDenJV2YbpvzQ6CY=\", false, function () {\n  return [useAuth];\n});\n_c = Widget;\nexport default Widget;\nvar _c;\n$RefreshReg$(_c, \"Widget\");","map":{"version":3,"names":["useAuth","Link","jsxDEV","_jsxDEV","Widget","imageUrl","name","start_date","end_date","id","_s","isLoggedIn","formatDate","dateString","date","Date","isNaN","getTime","Error","year","getFullYear","month","String","getMonth","padStart","day","getDate","weekDayNames","weekDay","getDay","formattedDate","console","log","to","style","display","width","borderRadius","boxShadow","overflow","backgroundColor","textAlign","justifyItems","children","height","backgroundImage","backgroundSize","backgroundPosition","fileName","_jsxFileName","lineNumber","columnNumber","padding","margin","fontSize","color","_c","$RefreshReg$"],"sources":["/Users/kai/side-project/ticket-booking-system/frontend/src/components/widget.tsx"],"sourcesContent":["// src/components/widget.tsx\nimport { useAuth } from '../context/AuthContext'\nimport { Link } from 'react-router-dom'\nimport { formatDate } from '../context/kits'\n\ninterface WidgetProps {\n  id: string // 假设每个活动有唯一的 id\n  imageUrl: { type: string; data: number[] }\n  name: string\n  on_sale_date: string\n  start_date: string\n  end_date: string\n}\n\nfunction Widget({ imageUrl, name, start_date, end_date, id }: WidgetProps) {\n  const { isLoggedIn } = useAuth()\n\n  function formatDate(dateString:string) {\n    // 将字符串解析为 Date 对象\n    const date = new Date(dateString)\n\n    // 确保有效的日期\n    if (isNaN(date.getTime())) {\n      throw new Error('Invalid date string')\n    }\n\n    // 获取日期的组成部分\n    const year = date.getFullYear()\n    const month = String(date.getMonth() + 1).padStart(2, '0') // 月份从0开始，需要加1\n    const day = String(date.getDate()).padStart(2, '0')\n\n    // 获取星期几\n    const weekDayNames = ['日', '一', '二', '三', '四', '五', '六']\n    const weekDay = `${weekDayNames[date.getDay()]}`\n\n    // 返回格式化的日期字符串\n    return `${year}/${month}/${day} (${weekDay})`\n  }\n\n  // 测试\n  const formattedDate = formatDate('2024-12-25')\n  console.log(formattedDate) // 输出: 2024/12/25 (星期三)\n\n  return (\n    <Link\n      to={`/activity/${id}`} // 使用模板字符串来传递动态的 ID\n      style={{\n        display: 'block',\n        width: '300px',\n        borderRadius: '10px',\n        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n        overflow: 'hidden',\n        backgroundColor: '#fff',\n        textAlign: 'center',\n        justifyItems: 'left',\n      }}\n    >\n      {/* 照片区域 */}\n      <div\n        style={{\n          width: '100%',\n          height: '200px',\n          backgroundImage: `url(${imageUrl})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n        }}\n      ></div>\n\n      {/* 文字区域 */}\n      <p\n        style={{\n          padding: '10px 15px',\n          margin: 0,\n          fontSize: '16px',\n          color: '#333',\n        }}\n      >\n        {formatDate(start_date)}\n      </p>\n      <p\n        style={{\n          padding: '5px 15px',\n          margin: 0,\n          fontSize: '16px',\n          color: '#333',\n        }}\n      >\n        {name}\n      </p>\n    </Link>\n  )\n}\n\nexport default Widget\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}